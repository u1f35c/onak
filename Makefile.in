#
# Makefile for onak.
#

CC = @CC@
CFLAGS += @CFLAGS@ -Wall -pedantic -fPIC
# Uncomment to enable profiling.
LDFLAGS += @LDFLAGS@
# Can be "pg" for Postgresql, "file" for flat files or "db2" for pksd db2 style.
DBTYPE = @DBTYPE@
#
LIBS = @LIBS@
DB4LIBS = @DB4LIBS@
#MAKEDEPEND = makedepend -f- -- 
MAKEDEPEND = $(CC) -MM
prefix ?= @prefix@
exec_prefix ?= @exec_prefix@

PROGS = add lookup gpgwww onak splitkeys onak-mail.pl stripkey
CORE_OBJS = armor.o charfuncs.o decodekey.o getcgi.o hash.o \
	keyid.o keyindex.o ll.o mem.o onak-conf.o parsekey.o sha1.o md5.o \
	log.o photoid.o wordlist.o cleanup.o merge.o sendsync.o keyarray.o
SRCS = armor.c parsekey.c merge.c keyid.c md5.c sha1.c main.c getcgi.c mem.c \
	keyindex.c stats.c lookup.c add.c keydb_$(DBTYPE).c ll.c hash.c \
	gpgwww.c onak-conf.c charfuncs.c sendsync.c log.c photoid.c \
	wordlist.c cleankey.c cleanup.c keyarray.c \
	$(foreach be,@BACKENDS@,keydb_$(be).c)
PROGS_LDFLAGS_EXTRA =

ifeq (x@KEYD@, xyes)
PROGS += keyd
KEYDB_OBJ = keydb_keyd.o
SRCS += keyd.c keydb_keyd.c
else
KEYDB_OBJ = keydb_$(DBTYPE).o
endif

ifeq (x@DBTYPE@, xdynamic)
LIBS += -ldl
BACKENDS = $(foreach be,@BACKENDS@,libkeydb_$(be).so)
PROGS += keyd
PROGS_LDFLAGS_EXTRA = -rdynamic
SRCS += keyd.c
endif

OBJS = stats.o cleankey.o $(CORE_OBJS) $(KEYDB_OBJ)

all: .depend $(PROGS) testparse maxpath sixdegrees splitkeys onak.conf \
	$(BACKENDS)

keyd: keyd.o $(CORE_OBJS) keydb_$(DBTYPE).o
	$(CC) $(LDFLAGS) $(PROGS_LDFLAGS_EXTRA) \
		-o keyd keyd.o $(CORE_OBJS) keydb_$(DBTYPE).o $(LIBS)

libkeydb_db4.so: keydb_db4.o
	$(CC) -shared $(DB4LIBS) -o libkeydb_db4.so keydb_db4.o $(CORE_OBJS)

libkeydb_pg.so: keydb_pg.o
	$(CC) -shared $(PQLIBS) -o libkeydb_pg.so keydb_pg.o $(CORE_OBJS)

libkeydb_%.so: keydb_%.o
	$(CC) -shared -o $@ $< $(CORE_OBJS)

keydb_%.o: keydb_%.c
	$(CC) -c -fPIC $(LDFLAGS) -o $@ $<

splitkeys: splitkeys.o $(CORE_OBJS) $(KEYDB_OBJ)
	$(CC) $(LDFLAGS) -o splitkeys splitkeys.o $(CORE_OBJS) $(KEYDB_OBJ) \
		$(LIBS) $(PROGS_LDFLAGS_EXTRA)

testparse: main.o $(OBJS)
	$(CC) $(LDFLAGS) -o testparse main.o $(OBJS) $(LIBS) \
		$(PROGS_LDFLAGS_EXTRA)

maxpath: maxpath.o $(OBJS)
	$(CC) $(LDFLAGS) -o maxpath maxpath.o $(OBJS) $(LIBS) \
		$(PROGS_LDFLAGS_EXTRA)

sixdegrees: sixdegrees.o $(OBJS)
	$(CC) $(LDFLAGS) -o sixdegrees sixdegrees.o $(OBJS) $(LIBS) \
		$(PROGS_LDFLAGS_EXTRA)

stripkey: stripkey.o $(OBJS)
	$(CC) $(LDFLAGS) -o stripkey stripkey.o $(OBJS) $(LIBS) \
		$(PROGS_LDFLAGS_EXTRA)

gpgwww: gpgwww.o $(OBJS)
	$(CC) $(LDFLAGS) -o gpgwww gpgwww.o $(OBJS) $(LIBS) \
		$(PROGS_LDFLAGS_EXTRA)

lookup: lookup.o cleankey.o $(CORE_OBJS) $(KEYDB_OBJ)
	$(CC) $(LDFLAGS) -o lookup lookup.o cleankey.o $(CORE_OBJS) \
		$(KEYDB_OBJ) $(LIBS) $(PROGS_LDFLAGS_EXTRA)

add: add.o cleankey.o $(CORE_OBJS) $(KEYDB_OBJ)
	$(CC) $(LDFLAGS) -o add add.o cleankey.o \
		$(CORE_OBJS) $(KEYDB_OBJ) $(LIBS) $(PROGS_LDFLAGS_EXTRA)

onak: onak.o cleankey.o $(CORE_OBJS) $(KEYDB_OBJ)
	$(CC) $(LDFLAGS) -o onak onak.o cleankey.o \
		$(CORE_OBJS) $(KEYDB_OBJ) $(LIBS) $(PROGS_LDFLAGS_EXTRA)

onak-conf.o: onak-conf.c onak-conf.h
	$(CC) $(CFLAGS) -DCONFIGFILE=\"@sysconfdir@/onak.conf\" \
		-DDBFUNCS=keydb_@DBTYPE@_funcs -c onak-conf.c

onak-mail.pl: onak-mail.pl.in
	sed 's:@CONFIG@:@sysconfdir@/onak.conf:g' < onak-mail.pl.in > onak-mail.pl
	chmod +x onak-mail.pl

onak.conf: onak.conf.in
	sed -e 's:@BINDIR@:@bindir@:g' \
		-e 's:@LIBDIR@:@libdir@:g' \
		-e 's:@STATEDIR@:@localstatedir@:g' \
		< onak.conf.in > onak.conf

clean:
	$(RM) $(PROGS) $(OBJS) Makefile.bak testparse maxpath *.core core \
		gpgwww.o add.o lookup.o main.o maxpath.o onak.o sixdegrees \
		sixdegrees.o splitkeys.o stripkey.o onak.conf keyd.o \
		$(foreach be,@BACKENDS@,keydb_$(be).o) *.so
ifeq (x@KEYD@, xyes)
	$(RM) keyd.o keydb_$(DBTYPE).o
endif

distclean: clean
	$(RM) -f Makefile .depend config.{log,status,h}
	$(RM) -r autom4te.cache

.depend: $(SRCS)
	rm -f .depend
	$(MAKEDEPEND) $(CFLAGS) $(SRCS) > .depend

include .depend

.PHONY: all clean
