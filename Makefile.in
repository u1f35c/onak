#
# Makefile for onak.
#

CC = @CC@
CFLAGS += @CFLAGS@ -Wall -pedantic -fPIC
# Uncomment to enable profiling.
LDFLAGS += @LDFLAGS@
# Can be "pg" for Postgresql, "file" for flat files or "db4" for Berkeley DB.
DBTYPE = @DBTYPE@
#
LIBS = @LIBS@ @NETTLE_LIBS@
DB4LIBS = @DB4LIBS@
CURLLIBS = @LIBCURL@
#MAKEDEPEND = makedepend -f- -- 
MAKEDEPEND = $(CC) -MM
prefix ?= @prefix@
exec_prefix ?= @exec_prefix@

PROGS = add lookup hashquery gpgwww onak splitkeys onak-mail.pl stripkey \
	wotsap
CORE_OBJS = armor.o charfuncs.o decodekey.o getcgi.o hash.o marshal.o \
	keyid.o keyindex.o ll.o mem.o onak-conf.o parsekey.o sigcheck.o \
	log.o photoid.o wordlist.o cleanup.o merge.o sendsync.o keyarray.o \
	sha1x.o
ifeq (x@NETTLE_LIBS@, x)
CORE_OBJS += md5.o sha1.o
endif
SRCS = armor.c parsekey.c merge.c keyid.c md5.c sha1.c main.c getcgi.c mem.c \
	keyindex.c stats.c lookup.c add.c keydb_$(DBTYPE).c ll.c hash.c \
	gpgwww.c onak-conf.c charfuncs.c sendsync.c log.c photoid.c sigcheck.c \
	wordlist.c cleankey.c cleanup.c keyarray.c hashquery.c marshal.c \
	sha1x.c \
	$(foreach be,@BACKENDS@,keydb_$(be).c)
PROGS_LDFLAGS_EXTRA =

ifeq (x@KEYD@, xyes)
PROGS += keyd keydctl
KEYDB_OBJ = keydb_keyd.o
SRCS += keyd.c keydb_keyd.c keydctl.c
else
KEYDB_OBJ = keydb_$(DBTYPE).o
endif

ifeq (x@DBTYPE@, xdynamic)
LIBS += -ldl
BACKENDS = $(foreach be,@BACKENDS@,libkeydb_$(be).so)
PROGS += keyd keydctl
PROGS_LDFLAGS_EXTRA = -rdynamic
SRCS += keyd.c keydctl.c
endif

OBJS = stats.o cleankey.o $(CORE_OBJS) $(KEYDB_OBJ)

all: .depend $(PROGS) testparse maxpath sixdegrees splitkeys onak.ini \
	wotsap $(BACKENDS)

test: onak $(BACKENDS)
	perl -cw onak-mail.pl
	@./runtests

install: $(PROGS) onak.ini $(BACKENDS)
	install -d $(DESTDIR)/@bindir@
	install -d $(DESTDIR)/@libdir@/onak/backends
	install -d $(DESTDIR)/@localstatedir@/lib/onak
	install -d $(DESTDIR)/@mandir@/man1
	install -d $(DESTDIR)/@mandir@/man8
	install -d $(DESTDIR)/@sysconfdir@
	install -m 755 onak-mail.pl $(DESTDIR)/@libdir@/onak
	install onak splitkeys $(DESTDIR)/@bindir@
	install onak.1 splitkeys.1 $(DESTDIR)/@mandir@/man1
	install keyd.8 keydctl.8 onak-mail.pl.8 $(DESTDIR)/@mandir@/man8
ifeq (x@DBTYPE@, xdynamic)
	install $(BACKENDS) $(DESTDIR)/@libdir@/onak/backends
	install -d $(DESTDIR)/@sbindir@
	install keyd $(DESTDIR)/@sbindir@
	install keydctl $(DESTDIR)/@bindir@
endif

keyd: keyd.o $(CORE_OBJS) keydb_$(DBTYPE).o
	$(CC) $(LDFLAGS) $(PROGS_LDFLAGS_EXTRA) \
		-o keyd keyd.o $(CORE_OBJS) keydb_$(DBTYPE).o $(LIBS) \
		@SYSTEMD_LIBS@

keydctl: keydctl.o onak-conf.o ll.o log.o
	$(CC) $(LDFLAGS) $(PROGS_LDFLAGS_EXTRA) \
		-o keydctl keydctl.o onak-conf.o ll.o log.o $(LIBS)

libkeydb_db4.so: keydb_db4.o $(CORE_OBJS)
	$(CC) $(LDFLAGS) -shared -o libkeydb_db4.so keydb_db4.o $(DB4LIBS) $(CORE_OBJS)

libkeydb_hkp.so: keydb_hkp.o $(CORE_OBJS)
	$(CC) $(LDFLAGS) -shared -o libkeydb_hkp.so keydb_hkp.o $(CURLLIBS) $(CORE_OBJS)

libkeydb_pg.so: keydb_pg.o $(CORE_OBJS)
	$(CC) $(LDFLAGS) -shared -o libkeydb_pg.so keydb_pg.o $(PQLIBS) $(CORE_OBJS)

libkeydb_%.so: keydb_%.o $(CORE_OBJS)
	$(CC) $(LDFLAGS) -shared -o $@ $< $(CORE_OBJS)

splitkeys: splitkeys.o $(CORE_OBJS) $(KEYDB_OBJ)
	$(CC) $(LDFLAGS) -o splitkeys splitkeys.o $(CORE_OBJS) $(KEYDB_OBJ) \
		$(LIBS) $(PROGS_LDFLAGS_EXTRA)

testparse: main.o $(OBJS)
	$(CC) $(LDFLAGS) -o testparse main.o $(OBJS) $(LIBS) \
		$(PROGS_LDFLAGS_EXTRA)

maxpath: maxpath.o $(OBJS)
	$(CC) $(LDFLAGS) -o maxpath maxpath.o $(OBJS) $(LIBS) \
		$(PROGS_LDFLAGS_EXTRA)

sixdegrees: sixdegrees.o $(OBJS)
	$(CC) $(LDFLAGS) -o sixdegrees sixdegrees.o $(OBJS) $(LIBS) \
		$(PROGS_LDFLAGS_EXTRA)

wotsap: wotsap.o $(OBJS)
	$(CC) $(LDFLAGS) -o wotsap wotsap.o $(OBJS) $(LIBS) \
		$(PROGS_LDFLAGS_EXTRA)

stripkey: stripkey.o $(OBJS)
	$(CC) $(LDFLAGS) -o stripkey stripkey.o $(OBJS) $(LIBS) \
		$(PROGS_LDFLAGS_EXTRA)

gpgwww: gpgwww.o $(OBJS)
	$(CC) $(LDFLAGS) -o gpgwww gpgwww.o $(OBJS) $(LIBS) \
		$(PROGS_LDFLAGS_EXTRA)

hashquery: hashquery.o $(CORE_OBJS) $(KEYDB_OBJ)
	$(CC) $(LDFLAGS) -o hashquery hashquery.o $(CORE_OBJS) \
		$(KEYDB_OBJ) $(LIBS) $(PROGS_LDFLAGS_EXTRA)

lookup: lookup.o cleankey.o $(CORE_OBJS) $(KEYDB_OBJ)
	$(CC) $(LDFLAGS) -o lookup lookup.o cleankey.o $(CORE_OBJS) \
		$(KEYDB_OBJ) $(LIBS) $(PROGS_LDFLAGS_EXTRA)

add: add.o cleankey.o $(CORE_OBJS) $(KEYDB_OBJ)
	$(CC) $(LDFLAGS) -o add add.o cleankey.o \
		$(CORE_OBJS) $(KEYDB_OBJ) $(LIBS) $(PROGS_LDFLAGS_EXTRA)

onak: onak.o cleankey.o $(CORE_OBJS) $(KEYDB_OBJ)
	$(CC) $(LDFLAGS) -o onak onak.o cleankey.o \
		$(CORE_OBJS) $(KEYDB_OBJ) $(LIBS) $(PROGS_LDFLAGS_EXTRA)

onak-conf.o: onak-conf.c onak-conf.h
	$(CC) $(CFLAGS) -DCONFIGDIR=\"@sysconfdir@\" \
		-DDBINIT=keydb_@DBTYPE@_init -c onak-conf.c

# HACK: onak-conf.o needs to be able to see keydb_@DBTYPE@_funcs, but
# keydctl doesn't want to link against the DB stuff. To be fixed more cleanly.
keydctl.o: keydctl.c keyd.h
	$(CC) $(CFLAGS) -DDBINIT=keydb_@DBTYPE@_init -c keydctl.c

%: %.in
	sed -e 's:@BINDIR@:@bindir@:g' \
		-e 's:@CONFIG@:@sysconfdir@/onak.ini:g' \
		-e 's:@CONFIGOLD@:@sysconfdir@/onak.conf:g' \
		-e 's:@LIBDIR@:@libdir@:g' \
		-e 's:@RUNDIR@:@runstatedir@:g' \
		-e 's:@SBINDIR@:@sbindir@:g' \
		-e 's:@STATEDIR@:@localstatedir@:g' \
		< $< > $@

clean:
	$(RM) $(PROGS) $(OBJS) Makefile.bak testparse maxpath *.core core \
		gpgwww.o add.o lookup.o main.o maxpath.o onak.o sixdegrees \
		sixdegrees.o splitkeys.o stripkey.o onak.ini keyd.o \
		keydctl.o hashquery.o wotsap.o version.h \
		TAGS cscope.out cscope.files \
		$(foreach be,@BACKENDS@,keydb_$(be).o) *.so
ifeq (x@KEYD@, xyes)
	$(RM) keyd.o keydb_$(DBTYPE).o
endif

distclean: clean
	$(RM) -f Makefile .depend config.log config.status config.h
	$(RM) -r autom4te.cache

doxygen-docs: *.c *.h Doxyfile
	doxygen

version.h: $(SRCS)
	@echo '#include "config.h"' > version.h
	@if [ -e .git ]; then \
		echo "#define ONAK_VERSION \"`git describe --tags --dirty | cut -d - -f 2-`\"" \
		>> version.h; \
	else \
		echo "#define ONAK_VERSION PACKAGE_VERSION" >> version.h; \
	fi

.depend: $(SRCS) version.h
	rm -f .depend
	$(MAKEDEPEND) $(CFLAGS) $(SRCS) > .depend

include .depend

.PHONY: all clean
